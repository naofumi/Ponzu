= ks_element :id => "templating",
             :data => { :title => "Javascript templating languages",
                       :container => "ipadish_content",
                       :"container-ajax" => docs_path(:page => "showcase/layout") } do
  .panel
    :markdown
      # Javascript templating languages

      Kamishibai is an HTML compositor. The server sends HTML fragments to the browser
      and the browser combines them to create the DOM. Since the main mode of network
      communication is HTML based, a Javascript templating language seems unnecessary.

      Javascript templating languages are used to generate HTML on the browser. They use
      a `template` and insert values from either JSON or client-side model objects.

      In Kamishibai, we have added the `dust-rails` gem which uses dust.js, a Javascript
      templating library. The reason for adding a Javascript templating library is to 
      reduce the size of the data transferred from the server. In Kamishibai, we store
      the server response *as is* into a local database. Since the database is size 
      constrained, we try hard to reduce the amount of data transferred. Compared to HTML,
      JSON can be very compact. This is why we added a templating library.

      When we transfer data via JSON, we use `jbuilder` to generate just enough data to
      draw the HTML. The JSON does not contain the whole object. Furthermore, the JSON
      data does not contain the HTML tags. HTML tags tend to be verbose. Adding `class`,
      `id` and other `data-` attributes generates a lot of bytes. These bytes are typically
      identical even when the `model` changes. If we use a templating library, we can
      keep the tags and attributes that don't change inside the template. We provide
      only the data that *does* change in JSON. In our limited testing, if the HTML is
      relatively tag-heavy, this can results in a 50% reduction of data.

      The issues with a templating library is that it makes view generation complex. Although
      I have not fully studied the situation, it will probably be difficult to use the
      very helpful rails view-helpers directly. Although dust.js provides a very terse
      syntax that is surprisingly powerful, juggling between dust.js and rails views will
      take more effort than working inside rails alone.

      ## Current status

      Currently, we use `jbuilder` to generate a JSON response. This response data is first
      parsed into Javascript and then converted into an HTML fragment, using Dust.js inside `KSAjax.convertAjaxDataToElements`. The HTML fragment is then processed as a regular Kamishibai
      HTML fragment response.

      In addition to the JSON data that is sent to Dust.js, the JSON response should have

          {"renderer":{"library":"dust", "template":"show_presentation", "expiry":3600}}

      This tells Kamishibai which template is should use to generate the HTML fragment.

      ## Where we should use it

      We will continue to test the Javascript templating approach. We have to learn how to
      use it effectively so that the added complexity will be manageable. The 50% decrease in
      data size is attractive, but not attractive enough to warrent huge efforts in development.
      We won't yet use templating extensively, but maybe in some selected views.

      ## Other ideas

      The above discussion centers around the most common use of templating systems; inserting
      small pieces of text inside a template. However, in combination with Kamishibai, we can 
      come up with other uses.

      1. **Layout frames:** In Kamishibai, we sometimes use layout frames. For example, each page
         in this showcase specifies a URL that will download the left navigation and the header.
         Without this layout frame, the pages will not have containers to hold them. It might make
         sense to have these frames generated by the templating system.
